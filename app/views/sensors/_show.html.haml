.modal#sensor-info(tabindex="-1" role="dialog" aria-labelledby="sensor-info-label" data-show="true")
  .modal-dialog(role="document")
    .modal-content
      .modal-header
        %button.close(type="button" data-dismiss="modal" aria-label="Close")
          %span(aria-hidden="true") &times;
        %h4.modal-title#sensor-info-label
          = succeed ':' do
            = t 'sensors.name'
          = @sensor.name
          = surround '[',']' do
            = @sensor.id

      .modal-body
        - if @readings.present?
          .text-center
            %h3= t '.current_readings'
            - @readings.each do |m|
              - text = "#{t 'measurement.' + m[0].name}: #{m[1].last.value.round(4)} #{m[0].unit}"
              .current-reading
                - if m[0].name.include? 'pm'
                  %h4= text
                - else
                  = text
                %span.time
                  (#{m[1].last.time.strftime('%H:%M:%S')})

        .text-center.device-sm.visible-sm.device-md.visible-md.device-lg.visible-lg
          %br
          = succeed ':' do
            = t '.current_location'
          - if location = @sensor.current_location
            = succeed ',' do
              = location.latitude
              = location.latitude > 0 ? 'N' : 'S'
            = succeed (location.height ? ',' : '') do
              = location.longitude
              = location.longitude > 0 ? 'E' : 'W'
            - if location.height
              %span{ title: t('.altitude_unit_tooltip') }
                = "#{location.height} m."
          - else
            = t '.no_location'


        .text-center.device-sm.visible-sm.device-md.visible-md.device-lg.visible-lg
          .reading-chart#reading-chart-container

        .device-xs.visible-xs
          %br
          .alert.alert-info
            = t '.you_mustnt_be_afraid_to_dream_a_little_bigger_darling'

      .modal-footer
        .device-sm.visible-sm.device-md.visible-md.device-lg.visible-lg
          - pm_available = @readings.any?{ |m, _| m.name.include?('pm') }
          - if pm_available && !demo?
            %p
            %p
              .form-inline.pull-left
                .form-group
                  = link_to t('.show_reference'),
                            '#',
                            class: 'btn btn-primary pull-left',
                            id: 'show-reference-button'

                  #no-reference-error.alert.alert-danger.hidden= t('.no_reference')

                .form-group
                  = select_tag '', options_from_collection_for_select(@readings.map(&:first), :name, :name), id: 'rescale-measurement', class: 'form-control rescale-input'
                  = text_field_tag '', '(y-20)*2.5', id: 'rescale-function', class: 'form-control rescale-input'
                = button_tag t('.rescale'), id: 'rescale-button', class: 'btn btn-primary'

          .device-md.visible-md.device-lg.visible-lg
            .form-inline
              .form-group
                = text_field_tag '', '', id: 'csv-from',
                  class: 'form-control rescale-input csv-interval',
                  placeholder: t('from')
              .form-group
                = text_field_tag '', '', id: 'csv-to',
                  class: 'form-control rescale-input csv-interval',
                  placeholder: t('to')
              = link_to t('.download_csv'), readings_path(sensor_id: @sensor.id,
                format: :csv), id: 'csv-download', class: 'btn btn-default'

        %button.btn.btn-default(type="button" data-dismiss="modal")= t('close')

:javascript
  $(function () {
    $('#sensor-info').modal('toggle');
  });

  $('.csv-interval').on('change', function() {
    from = $('#csv-from').val();
    to = $('#csv-to').val();
    query = "&from=" + from + "&to=" + to;
    path = "#{readings_path(sensor_id: @sensor.id, format: :csv)}";
    $('#csv-download').attr('href', path + query);
  })

  $('.csv-interval').datetimepicker({
    format: 'yyyy-mm-ddThh:ii:ssZ',
    pickerPosition: 'top-left'
  });

- if @readings.present?
  :javascript
    $(function () {
      var yAxes = [];
      var readingSeries = [];
      #{
        pm_axis_index = -1
        @readings.map.with_index do |measurement, i|
          code = ""
          pm_reading = measurement[0].name.include?('pm')
          if !pm_reading || (pm_axis_index < 0)
            code += "yAxes[#{i}] = {
              title: {
                text: '#{I18n.t('measurement.' + (pm_reading ? 'pm' : measurement[0].name))} [#{measurement[0].unit}]',
                style: {
                  color: Highcharts.getOptions().colors[#{i}]
                }
              },
              labels: {
                style: {
                  color: Highcharts.getOptions().colors[#{i}]
                }
              },
              opposite: #{pm_reading ? 'false' : 'true'},
              showEmpty: false
            };\n"
            pm_axis_index = i if pm_reading
          end

          code += "readingSeries[#{i}] = {
            dbName: '#{measurement[0].name}',
            name: '#{I18n.t('measurement.' + measurement[0].name)}',
            data: #{measurement[1].map{ |r| [r.time.to_i, r.value.round(4)] }},
            yAxis: #{pm_reading ? pm_axis_index : i},
            tooltip: {
              valueSuffix: '#{measurement[0].unit}'
            }
          };\n"
        end.join('')
      }

      $('#reading-chart-container').highcharts({
        title: {
          text: '#{I18n.t('sensors.chart_title', interval: @interval/3600)}',
          x: -20 //center
        },
        xAxis: {
          type: 'datetime',
          labels: {
            formatter: function() {
              return Highcharts.dateFormat('%H:%M', this.value*1000);
            },
          },
          plotLines: #{locations_to_plotlines(@locations)}
        },
        tooltip: {
          formatter: function () {
            return '<div class="tooltip">' + Highcharts.dateFormat('%e %b %H:%M:%S', this.x * 1000) + '<br/><b>' + Highcharts.numberFormat(this.y) + ' [' + this.series.tooltipOptions.valueSuffix + ']</b></div>';
          }
        },
        yAxis: yAxes,
        series: readingSeries
      });
    });
